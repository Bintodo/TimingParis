# (C) Guglielmo Saggiorato <astyonax@gmail.com>

import numpy as np
import pandas as pd
from glob import glob
from tqdm import tqdm

def load_files_by_test(test):
    """
    This functions glues togheter the records generated by the TimeParis.py scripts
    in a single pandas dataframe.

    Parameters
    ---
    test: str   one of the available tests (inside,outin,bigpar)

    Returns
    ---
    None

    """

    fins = glob('data/{0:s}_2*.pdpkl'.format(test))
    print 'reading',len(fins),' files'
    rawdf = []
    for j in tqdm(fins):
        rawdf.append(pd.read_pickle(j))
    print 'pd.concat'
    rawdf = pd.concat(rawdf)
    print 'pd.drop_duplicates'
    rawdf = rawdf.drop_duplicates(subset=["departure","distance","duration","haversine_distance"])
    print 'pd.set_index'
    new_index = np.arange(0,len(rawdf.index),dtype=int)
    rawdf = rawdf.set_index(new_index)
    fnout = 'data/{0:s}_latest.pdpkl'.format(test)
    print 'post processing'
    df = post_processing(rawdf)
    print 'saving to',fnout
    print 'pd.to_pickle'
    df.to_pickle(fnout)

def get_coupled_trips_relative_speed(mode1,mode2,df):

    rows = df[(df.kind=='full') & ((df['mode']==mode1)| (df['mode']==mode2))]

    irows = rows.iterrows()
    FastSlowCol = '{0:s}_faster_{1:s}'.format(mode1,mode2)
    df['coupled']=0
    df[FastSlowCol]=-1

    count = 1
    if not ( rows['mode'].iat[0]==mode1 and rows['mode'].iat[1]==mode2) :
        raise IndexError('mode1 and mode2 mismatched wrt the first two records')

    for ix,row in tqdm(irows):
        rowa = row
        ia = ix
        ib,rowb = irows.next()
        if not (rowa['mode']==mode1 and rowb['mode']==mode2):
            if rowb['mode']==mode1:
                # shift by one
                rowa=rowb
                ia=ib
                ib,rowb = irows.next()
            else:
                continue
                print '.'
        df.set_value(col='coupled',index=ia,value=count)
        df.set_value(col='coupled',index=ib,value=count)

        FasterSlower = rowa.duration< rowb.duration
        df.set_value(col=FastSlowCol,index=ia,value=FasterSlower)
        df.set_value(col=FastSlowCol,index=ib,value=FasterSlower)

        count+=1

    # selection receipt
    cpd = df[df.coupled>0]
    row_mode1 = cpd[cpd['mode']==mode1]
    row_mode2 = cpd[cpd['mode']==mode2]
    return row_mode1,row_mode2,df


def post_processing(rawdf):
    """
        This function removes null records
        converts times in minuts, and distance in km
        and marks steps belonging to the same trip in columns 'same'
    """
    df = rawdf[~rawdf.departure.isnull()]
    df['duration[m]']=df.duration/60.
    df['distance[km]']=df.haversine_distance/1000.
    _, _, df=get_coupled_trips_relative_speed('bicycling','driving',df)

    #~ mark steps as belonging to the same full trip
    df['same']=0
    df.same=(df.kind=='full').astype(int)
    df.same=df.same.cumsum()

    return df


if __name__ == '__main__':
    tests = ['inside','outin','bigpar']
    for test in tests:
        print '-'*80
        print test.upper()
        print '*'*80
        # load, assemble, and post proces raw files
        load_files_by_test(test)
print 'done'
